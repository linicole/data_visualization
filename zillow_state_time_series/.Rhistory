setwd("/Volumes/lli2-1/Proj_NC/NC_Direct_Mail_Campaign/C52")
library('tidyverse')
library('tidysurv')
library('goliath')
# devtools::load_all("~/Documents/goliath/")
# devtools::install_github("jwdink/tidysurv")
tryCatch(expr = source("/Volumes/lli2-1/Proj_NC/NC_Direct_Mail_Campaign/helpers.R"),
error = function(e) source("/Volumes/analytics/jdink/helpers.R"))
theme_set(theme_bw())
theme_update(legend.position = 'bottom')
# assumes four letters are sent. if this needs to change, then issue-prob needs to be adjusted:
FIXED_COST <- params$data_cost + 4*params$cost_per_mailing
# FIXED_COST <- params$data_cost + params$cost_per_mailing*(1+0.895+0.89+0.885)
knitr::opts_chunk$set(include=FALSE, warning=FALSE, message=FALSE, echo=FALSE)
# get npv, allow for over-weighting of issue-rate/cpf:
get_ranking_npv <- function(gross_value, issue_prob, multi = 1) {
gross_value - FIXED_COST/(issue_prob*multi)
}
# this function takes a data-frame where each (potential) loan has X possible IRs, computes NPV,
# and (1) picks sub-36 if that's profitable, otherwise (2) picks the one that maximizes NPV
# if the max NPV < 0, then it returns NA for interest-rate for that app
filter_to_max_npv_ir <- function(df, id_col = 'loan_application_id') {
df %>%
group_by_(.dots = id_col) %>%
mutate(profitable_35 = npv[interest_rate_category==.35]>0,
best_ir = interest_rate_category[which.max(npv)] ) %>%
ungroup() %>%
# if .35's npv > 0 is TRUE, filter out the interest_rate_category != .35;
# if .35's npv > 0 is FALSE, filter out the interest_rate_category != interest_rate_category with highest income...
# after the filter, each person will only have one record.
filter( interest_rate_category == ifelse(profitable_35, .35, best_ir) ) %>%
# if any npv <= 0 (none of IR category works for the person) --> Set IR Cat as missing.
mutate( interest_rate_category = ifelse(npv<=0, NA, interest_rate_category) )
}
# this function takes a data-frame where each (potential) loan has X possible IRs,
# and picks based on a waterfall of min NPVs
filter_to_npv_waterfall_ir <- function(df, df_constraints, npv_col, id_col) {
# intersect_df_dfconstrain = c("interest_rate_category","state_type","state_ir_options")
# if not TRUE (not all names in df) --> stop
stopifnot( all(c('interest_rate_category','npv_min')%in%colnames(df_constraints)) )
df <- df %>% left_join(df_constraints)
# make sure df_constrains covers every IR Category in df
if (any(is.na(df$npv_min)))
warning(immediate. = TRUE, "Join missed ", sum(is.na(df$npv_min)), " records.")
list_of_dfs <- split(df, df$interest_rate_category) # names = c("0.35","0.65","0.98")
list_of_dfs <- list_of_dfs[order(readr::parse_number(names(list_of_dfs)))]
# for each sub-df, filter by npv_min
out <- data_frame()
for (i in seq_along(list_of_dfs)) {
this_df <- list_of_dfs[[i]]
this_df <- this_df[ this_df[[npv_col]] > this_df$npv_min , ] # double [] --> extract the vector, instead of a tibble column
# can't use this_df$npv_col, cuz npv_col is a string
if (i>1)
# if a UNIQUE_ID is already selected by an earlier IR Cat --> keep it and forget this IR Cat
this_df <- this_df[ !is.element(this_df[[id_col]], out[[id_col]]) , ]
out <- bind_rows(out, this_df)  # ues bind_rows over rbind: bind_rows can combine 2 dfs with different number of columns
}
out
}
filter_to_npv_cv_waterfall_ir <- function(df, df_constraints, npv_col, cv_col, id_col) {
# intersect_df_dfconstrain = c("interest_rate_category","state_type","state_ir_options")
# if not TRUE (not all names in df) --> stop
stopifnot( all(c('interest_rate_category','npv_min','cv_min') %in% colnames(df_constraints)) )
df <- df %>% left_join(df_constraints)
# make sure df_constrains covers every IR Category in df
if (any(is.na(df$npv_min)))
warning(immediate. = TRUE, "Join missed ", sum(is.na(df$npv_min)), " NPV records.")
if (any(is.na(df$cv_min)))
warning(immediate. = TRUE, "Join missed ", sum(is.na(df$cv_min)), " Credit Vision records.")
list_of_dfs <- split(df, df$interest_rate_category) # names = c("0.35","0.65","0.98","1.5")
list_of_dfs <- list_of_dfs[order(readr::parse_number(names(list_of_dfs)))]
# for each sub-df, filter by npv_min
out <- data_frame()
for (i in seq_along(list_of_dfs)) {
this_df <- list_of_dfs[[i]]
this_df <- this_df[ (this_df[[npv_col]] > this_df$npv_min) & (this_df[[cv_col]] > this_df$cv_min), ] # double [] --> extract the vector, instead of a tibble column
# can't use this_df$npv_col, cuz npv_col is a string
if (i>1)
# if a UNIQUE_ID is already selected by an earlier IR Cat --> keep it and forget this IR Cat
this_df <- this_df[ !is.element(this_df[[id_col]], out[[id_col]]) , ]
out <- bind_rows(out, this_df)  # ues bind_rows over rbind: bind_rows can combine 2 dfs with different number of columns
}
out
}
df_state_tier_config <- read_csv("./state_tier_config_new.csv")
get_state_type <- function(state, exclude = c() ) {
core_states <- unique(df_state_tier_config$TU_State_code[df_state_tier_config$state_type=="core"])
core_states <- setdiff(core_states, exclude)
bank_states <- unique(df_state_tier_config$TU_State_code[df_state_tier_config$state_type=="bank"])
bank_states <- setdiff(bank_states, exclude)
out <- rep(NA,length(state))
out[state %in% bank_states] <- 'bank'
out[state %in% core_states] <- 'core'
out
}
df_ir_categories <- tribble(~interest_rate, ~min, ~max,
.35,             .34,  .36,
.45,             .44,  .46,
.65,             .57,  .66,
.98,             .98,  .99,
1.50,            1.48, 1.51)
ir_categories <-
flatten(map(1:nrow(df_ir_categories),
~ with(df_ir_categories[.x,], setNames(list(c(min, max)), nm = interest_rate) )))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
setwd("/Users/lli2/Git/data_visualization/zillow_state_time_series")
state_ts <- read.csv('State_time_series.csv')
library(tidyr)
suppressMessages(library(dplyr))
library(ggplot2)
setwd("/Users/lli2/Git/data_visualization/zillow_state_time_series")
state_ts <- read.csv('State_time_series.csv')
glimpse(state_ts)
